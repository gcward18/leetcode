link: https://www.reddit.com/r/leetcode/comments/1eq5qkj/amazon_oa_for_sde2/#:~:text=Find%20the%20minimum%20watch%20score,N%20%3D%206
Prime Video “Watch History” Window: Data analysts at Amazon are studying Prime Video usage. You are given an array watchHistory of size n representing the series (by ID number) watched by a user over n consecutive days. Two specific series IDs are given: series1 and series2 (representing the top critic-rated and top audience-rated series respectively). Find the minimum “watch score,” defined as the length of the smallest contiguous period of days in which both Series 1 and Series 2 have been watched at least once. If the two series never appear together in any period, return –1
Example: If n=6 with watchHistory = [1, 3, 2, 1, 4, 2], series1 = 1, and series2 = 2, the output should be 2 because the shortest contiguous segment containing both series1 and series2 is of length 2 (for instance, days index 2–3 contain series 2 and 1).

link: https:///amazon-online-assessment/Get-Minimum-Boxes#:~:text=Alex%20is%20shipping%20the%20last,min%28boxes%29
Container Capacity – Minimum Box Removal: Alex is loading boxes into a shipping container. There are n boxes with sizes given in array boxes. The container has a capacity factor capacity. The boxes loaded in the container must satisfy the condition: max(boxSize) ≤ capacity * min(boxSize) for the set of boxes in the container
. Some boxes may need to be unloaded (removed) to meet this condition. Given the array boxes and the integer capacity, find the minimum number of boxes that must be removed to satisfy the max/min condition. Return that minimum removal count

Example: If boxes = [1, 2, 3, 8] and capacity = 2, the condition requires max ≤ 2min. Initially max=8, min=1 which violates 8 ≤ 21. Removing the box of size 8 leaves max=3, min=1 (3 ≤ 21 still false). Removing the box of size 3 leaves max=2, min=1 (2 ≤ 21 true). So at least 2 boxes must be removed.

Link:https://aonecode.com/amazon-online-assessment/Smallest-Lexical-Palindrome#:~:text=You%20team%20is%20building%20a,utility%20to%20group%20access%20keys
Smallest Lexicographical Palindrome (Access Key Identifier): Your team is building a key-management utility. Every access key is a string that is a palindrome (reads the same forward and backward). The system groups keys by a “group identifier.” The group identifier is defined as a reordering of the characters of one of the keys in the group such that it forms the lexicographically smallest possible palindrome

 Given a palindromic string key, determine the lexicographically smallest palindrome that can be formed by rearranging its characters. This result is the key’s group identifier

(If the key is already the smallest palindrome permutation, it remains unchanged.)
Example 1: input key = "baab". Output: "abba" (because “abba” is a palindrome and is the smallest in alphabetical order among all rearrangements of “baab”)


Example 2: input key = "pop". Output: "pop" (already the smallest palindrome)


Example 3: input key = "zyxxxyz". Output: "xyzxzyx" (which is the smallest palindrome achievable by rearranging characters of the key).


Link: https://leetcode.com/discuss/post/356981/amazon-oa-2019-min-cost-to-connect-all-n-1yue/
Minimum Cost to Connect All Servers: You are given a network connectivity problem. There are n servers (nodes), labeled 1 to n. You also have a list of already connected pairs of servers (existing network cables) and their connection costs. The network might be disconnected. Additionally, you have a list of potential new cables you could install, each with a cost. Find the minimum total cost to connect all n servers into a single network (making sure there is a path between any two servers) by possibly adding some of the new cables

. If it’s impossible to connect all servers even after using all new cables, return -1.
Example: Suppose n=6, existing connections = {1–4 (cost 3), 4–5 (cost 4), 2–3 (cost 2)}, and available new connections = {1–2 (cost 5), 1–6 (cost 2), 5–6 (cost 6)}. The cheapest way to connect all 6 nodes is to use new cables 1–6 and 1–2 in addition to existing ones, for a total cost of 2+5=7. (All servers 1-6 become connected)


Link: https://www.chegg.com/homework-help/questions-and-answers/given-black-white-image-form-m-n-pixel-matrix-grid-pixel-j-0-pixel-black-pixel-j-1-pixel-w-q93303228
Maximum Greyness of an Image: You are analyzing a black-and-white image represented as a binary matrix. Define the “greyness” of a pixel at position (i,j) as: (number of 1s in the i-th row) + (number of 1s in the j-th column) – (if the pixel itself is 1, subtract 1 to avoid double-counting)
chegg.com
. Compute the maximum greyness value among all pixels in the m×n matrix.
Example: For the matrix
csharp
Copy
Edit
grid = [
  [1, 0, 1],
  [0, 1, 0]
]
Row counts of 1s = [2, 1], Column counts = [1, 1, 1]. Greyness for pixel (0,0): row1 count 2 + col1 count 1 – (grid[0][0] is 1 so subtract 1) = 2. Greyness(0,2) = row1(2)+col3(1)–1 = 2. Greyness(1,1) = row2(1)+col2(1)–1 = 1. The maximum greyness is 2 in this example.

Link:
Five-Star Seller Ratings: Amazon tracks product ratings as 5-star reviews. You are given a list of products, where each product’s current ratings are represented as a pair [fiveStarCount, totalReviewCount]. You are also given a target percentage threshold (e.g. 95 for 95%). Determine the minimum number of additional 5-star reviews required (across all products) to reach or exceed the target five-star percentage for the company’s overall ratings. Each new review can be assumed to be a 5-star review for some product (increasing that product’s fiveStarCount and totalReviewCount by 1). The overall percentage is calculated as (sum of all five-star reviews across products) / (sum of all reviews across products) * 100%. Add five-star reviews optimally to raise the average to at least threshold.
Example: Suppose two products have ratings [4, 5] and [3, 6] (i.e. 4/5 = 80%, 3/6 = 50%). That’s 7 five-stars out of 11 total ≈ 63.6% overall. To reach 70%, you could add reviews to the second product (which has lower ratio) until overall ratio ≥ 70%. (This is typically solved with a greedy approach using a max-heap of review gain impact per product.)

Link:
User Transaction Logs (Active Users): A company parses logs of user transactions. Each log entry is a string in the format "UserID1 UserID2 amount". (It means UserID1 sent amount to UserID2 in that transaction.) A user is “involved” in a transaction if they appear as either sender or receiver. Given a list of log entries and an integer threshold, identify all user IDs that appear in at least threshold transactions. Return the result as a list of user IDs in ascending numeric order
gist.github.com
gist.github.com
.
Example: Logs = ["345 234 50", "234 319 20", "345 319 100", "319 345 45"], threshold = 2. User 345 appears in 3 transactions (as sender in first and third, receiver in fourth), 234 in 2, 319 in 3. All three have ≥2 transactions, so output [234, 319, 345] sorted.
Repeated DNA Sequences: Biologists are analyzing DNA strands. A DNA string is composed of characters {'A','C','G','T'}. Find all distinct substrings of length 10 that occur at least twice in a given DNA string. (Return them in any order.)
Example: Input: "ACGAATTCCGACGAATTCCG" – Output (order may vary): ["ACGAATTCCG", "CGAATTCCGA", "GAATTCCGAC"] (These are the 10-letter sequences that appear more than once in the string).

Link: https://hackmd.io/@mizugakun/rJld89L-Y#:~:text=Description%3A%20Given%202%20lists%20,If%20no%20pair%20is
Optimal Resource Utilization: You are planning server capacity for an application. You have two lists A and B of resource packages. Each element in each list is a pair [id, value] where id is a unique identifier and value is the amount of resource (e.g. memory usage) for a component. You have a target capacity T. Find all pairs of one element from A and one element from B such that the sum of their values is ≤ T and as close to T as possible. Output the pairs of IDs for these optimal pairs. If there are multiple pairs with the same maximal sum <= T, return all of them

. If no pair sums to <= T, return an empty list.
Example: A = [[1, 2], [2, 4], [3, 6]], B = [[1, 2], [2, 5]], T = 7. The pairs and sums are: (id2 from A + id1 from B) = 4+2=6, (id3 + id1) = 6+2=8, (id1 + id1) = 2+2=4, (id2 + id2) = 4+5=9, (id3 + id2) = 6+5=11, etc. The largest sum ≤7 is 6. The pair achieving sum=6 is (A_id2=2, B_id1=1) with sum 6

. Output: [[2, 1]]. (If there were other pairs summing to 6, they would also be included.)

Link: https://leetcode.com/problems/count-number-of-teams/description/
Counting “Excellent Teams”: You are given an array of skill ratings of developers. We define an "excellent team" as a team of 3 developers (3 ratings from the array) where either the ratings are strictly increasing or strictly decreasing (when sorted by some order). Count the number of distinct excellent teams of size 3 that can be formed from the given ratings. (Order of selection doesn’t matter, and each team is an unordered triple of indices.)
Example: Ratings = [4, 7, 3, 5]. The increasing teams of 3 are: (4,5,7) using indices (rating 4,5,7) and (3,5,7) – so 2 increasing teams. Decreasing teams: (7,5,4) and (7,5,3) – another 2. Total = 4. (Note: This problem is equivalent to counting the number of increasing or decreasing subsequences of length 3.)
